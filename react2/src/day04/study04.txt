hooks의 규칙 두가지
1. 무조건 최상위 레벨에서만 호출해야 함(해당 컴포넌트 안에서 최상위 레벨)
- 반복문이나 조건문 혹은 중첩된 함수 안에서 실행해서는 안됨
- 컴포넌트가 렌더링될 때 매번 같은 순서로 호출되어야 함
2. 리액트 함수 컴포넌트에서만 훅을 호출해야 함
- 훅은 클래스 컴포넌트의 사용 불편함을 해결하기 위해서 만들어짐
- 일반적 자바스크립트 함수에서 훅을 호출하면 안됨(export default 로 지정한 컴포넌트에서만 사용해야 한다)

커스텀 훅 : 리액트에서 제공하는 훅 이외의 기능이 필요할 경우 사용자가 직접 생성하여 사용할 수 있는 hook
- 여러 컴포넌트에서 반복적으로 사용해야 하는 로직을 hook을 만들어서 재사용하기 위해서 사용함
- 컴포넌트의 이름에 접두사 'use'를 사용하고 내부에 다른 hook을 호출하는 자바스크립트 함수
- 'use'를 사용하지 않으면 특정 함수 내에서 훅을 사용하는지 알 수 없기 때문에 훅의 조건을 검사 할 수 없음
- 커스텀 훅도 훅이기 때문에 훅의 조건이 그대로 적용됨

이벤트 사용하기 : 컴포넌트에 함수를 추가하고 JSX를 통한 UI에서 on 이벤트 속성에 이벤트 발생 시 실행할 함수명을 입력하여 사용함
- 매개변수를 전달하고자 할 경우 on 이벤트 속성에 콜백함수를 지정하고 콜백함수에서 지정한 함수를 실행하는 형태로 해야함
- 실행하는 함수에 매개변수를 입력하여 실행하면 됨

조건부 렌더링 : 어떠한 조건에 따라서 렌더링이 달라지는 것
자바스크립트의 Truthy와 Falsy : 자바스크립트에서 참과 거짓을 구분하는 데이터 타입인 논리형(bool) 타입은 값이 true, false로만 구성되어 있음
- 자바스크립트에서 true 및 false가 아니더라도 true 및 false 로 여겨지는 값이 존재함
- 이러한 데이터 형태르 Thruthy, Falsy라고 함
Truthy : true, [], {}, 0이 아닌 숫자 데이터(0만 아니면 됨 그 외애는 true), 빈 문자열이 아닌 문자열
Falsy : false, 숫자 0, 실수 0.0, 빈 문자열 null(사용 하고 비어있는거), undefined(사용전 비어있는거), NaN(not a number)

엘리먼트 변수 : 조건부 렌더링 시 렌더링 해야할 컴퓨넌트를 변수처럼 사용하는 것
- let 변수명 = <컴포넌트명/>;
- {변수명}

인라인 조건문 : 조건문을 소스코드에 집어넣어서 사용하는 것, inline if, inline if ~ else
inline if : if 문을 조건부 랜더링이 필요한 곳에 입력하여 사용하는 것
- 실제 if 문 아닌 AND(&&) 연산자를 사용하여 inline if 를 구현함
- true && 조건식 -> 조건식의 결과
- false && 조건식 -> false
- Falsy 조건식을 사용 시 뒤에 있는 조건 결과를 평가하지 않기 때문에 화면에 표시하지 않지만 Falsy 값이 화면에 출력될 수 있음(Counter 파일 참고)
inline if ~ else : if ~ else 문을 조건부 랜더링이 필요한 곳에 입력하여 사용
- 실제 if ~ else 이 아닌 삼항연산자를 사용하여 inline if ~ else 를 구현함
- 조건문 ? 참일경우 : 거짓일경우;

랜더링 막기 : 조건부 랜더링 사용 시 조건에 따라서 컴포넌트를 출력하지 않게 해야할 경우 null을 출력



노드 모듈이 없는 경우 터미널로 가서 현재 프로젝트 경로로 이동 후 npm install 사용

다운로드가 완료되면 구성편집에서 npm 추가, 이름, 명령어 run, 스트립트 start, 그 외 기본값(노드 인터프리터, 패키지 관리자 정상적으로 입력 된지만 확인하면 됨)

구성편집에서 자바스크립트 디버그 추가, 이름, URL http://localhost:3000, 브라우저 크롬, 그 외는 선택사항